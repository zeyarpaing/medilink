// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  DOCTOR
  ADMIN
}

model Account {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String
  phone         String?
  User          User?
  Doctor        Doctor?
  Admin         Admin?
}

model MedicalHistory {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

model User {
  id             String           @id @default(cuid())
  Account        Account          @relation(fields: [accountId], references: [id])
  accountId      String           @unique
  Booking        Booking[]
  MedicalHistory MedicalHistory[]
}

// Create Doctor and Admin 
model Doctor {
  id                   String              @id @default(cuid())
  Account              Account             @relation(fields: [accountId], references: [id])
  accountId            String              @unique
  Schedule             Schedule[]
  speciality           String
  certification        String
  HealthcareProvider   HealthcareProvider? @relation(fields: [healthcareProviderId], references: [id])
  healthcareProviderId Int?
}

model Admin {
  id                 String              @id @default(cuid())
  Account            Account             @relation(fields: [accountId], references: [id])
  accountId          String              @unique
  HealthcareProvider HealthcareProvider? @relation(fields: [providerId], references: [id])
  providerId         Int?                @unique
}

model Transaction {
  id            String   @id @default(cuid())
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Booking       Booking  @relation(fields: [bookingId], references: [id])
  bookingId     String   @unique
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id          String        @id @default(cuid())
  schedule    Schedule      @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      BookingStatus @default(CONFIRMED)
  Transaction Transaction?
}

model Schedule {
  id           String             @id @default(cuid())
  dateTime     DateTime
  duration     Int
  Service      Service            @relation(fields: [serviceId], references: [id])
  serviceId    Int
  maxBooking   Int
  bookingPrice Int                @default(0)
  providerId   Int
  Provider     HealthcareProvider @relation(fields: [providerId], references: [id])
  Doctor       Doctor?            @relation(fields: [doctorId], references: [id])
  doctorId     String?
  Booking      Booking[]
}

model Service {
  id                   Int                 @id @default(autoincrement())
  name                 String
  image                String
  bookingPrice         Int
  minDuration          Int
  description          String
  HealthcareProvider   HealthcareProvider? @relation(fields: [healthcareProviderId], references: [id])
  healthcareProviderId Int?
  schedule             Schedule[]
}

enum ProviderType {
  HOSPITAL
  CLINIC
  LABORATORY
}

model HealthcareProvider {
  id          Int          @id @default(autoincrement())
  name        String
  address     String
  phone       String
  email       String
  image       String
  slug        String
  type        ProviderType
  description String
  services    Service[]
  Admin       Admin?
  Schedule    Schedule[]
  Doctor      Doctor[]
}
